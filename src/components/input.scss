@use "sass:map";
@use "../variables/index.scss" as variables;
@use "../mixins/index.scss" as mixins;

.input {
  @include mixins.element();
  background-color: var(--#{variables.$prefix}color-default-back);
  border-color: var(--#{variables.$prefix}color-default-border);
  border-radius: var(--#{variables.$prefix}border-radius-medium);
  border-style: solid;
  border-width: var(--#{variables.$prefix}border-width-medium);
  padding: 0.5rem;
  @each $borderRadius in variables.$borderRadiuses {
    $name: map.get($borderRadius, "name");
    &.is-border-radius-#{$name} {
      border-radius: var(--#{variables.$prefix}border-radius-#{$name});
    }
  }
  @each $borderWidth in variables.$borderWidths {
    $name: map.get($borderWidth, "name");
    &.is-border-width-#{$name} {
      border-width: var(--#{variables.$prefix}border-radius-#{$name});
    }
  }

  &::placeholder {
    color: var(--#{variables.$prefix}color-default-placeholder);
  }
  &:focus,
  &.is-focus,
  &.is-focused {
    outline: none;
    background-color: var(--#{variables.$prefix}color-default-focus-back);
    border-color: var(--#{variables.$prefix}color-default-focus-border);
  }
  &[disabled],
  fieldset[disabled],
  &.is-disabled {
    background-color: var(--#{variables.$prefix}color-default-disabled-back);
    border-color: var(--#{variables.$prefix}color-default-disabled-border);
  }

  @if (not variables.$is-skelton) {
    @each $color in variables.$colors {
      $colorName: map.get($color, "name");
      &.is-#{$colorName} {
        background-color: var(--#{variables.$prefix}color-#{$colorName}-back);
        border-color: var(--#{variables.$prefix}color-#{$colorName}-border);
        color: var(--#{variables.$prefix}color-#{$colorName}-fore);
        &::placeholder {
          color: var(--#{variables.$prefix}color-#{$colorName}-placeholder);
        }
        &:focus,
        &.is-focus,
        &.is-focused {
          background-color: var(
            --#{variables.$prefix}color-#{$colorName}-focus-back
          );
          border-color: var(
            --#{variables.$prefix}color-#{$colorName}-focus-border
          );
        }
        &[disabled],
        fieldset[disabled],
        &.is-disabled {
          background-color: var(
            --#{variables.$prefix}color-#{$colorName}-disabled-back
          );
          border-color: var(
            --#{variables.$prefix}color-#{$colorName}-disabled-border
          );
        }
      }
    }
  }
}

.input-text {
  @extend .input;
}

.input-checkbox {
  @extend .input;
  appearance: none;
  border-radius: 25%;
  cursor: pointer;
  height: 1rem;
  line-height: 1.5;
  position: relative;
  vertical-align: middle;
  width: 1rem;
  &:after {
    background-color: transparent;
    border-color: transparent;
    border-radius: 0%;
    border-style: solid;
    border-width: 0 var(--#{variables.$prefix}border-width-medium)
      var(--#{variables.$prefix}border-width-medium) 0;
    content: "";
    display: block;
    height: 1rem;
    position: absolute;
    top: -0.33rem;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;
    transform: rotate(45deg);
    width: 0.5rem;
  }
  @each $borderWidth in variables.$borderWidths {
    $name: map.get($borderWidth, "name");
    &.is-border-width-#{$name} {
      &:after {
        border-right-width: var(--#{variables.$prefix}border-radius-#{$name});
        border-bottom-width: var(--#{variables.$prefix}border-radius-#{$name});
      }
    }
  }
  &:checked {
    &:after {
      border-color: var(--#{variables.$prefix}color-default-fore);
    }
  }
  &[disabled],
  fieldset[disabled],
  &.is-disabled {
    background-color: var(--#{variables.$prefix}color-default-disabled-back);
    border-color: var(--#{variables.$prefix}color-default-disabled-border);
    &:checked {
      &:after {
        border-color: var(--#{variables.$prefix}color-default-disabled-fore);
      }
    }
  }
  @if (not variables.$is-skelton) {
    @each $color in variables.$colors {
      $colorName: map.get($color, "name");
      &.is-#{$colorName} {
        background-color: var(--#{variables.$prefix}color-#{$colorName}-back);
        border-color: var(--#{variables.$prefix}color-#{$colorName}-border);
        &:checked {
          &:after {
            border-color: var(--#{variables.$prefix}color-#{$colorName}-fore);
          }
        }
        &[disabled],
        fieldset[disabled],
        &.is-disabled {
          background-color: var(
            --#{variables.$prefix}color-#{$colorName}-disabled-back
          );
          border-color: var(
            --#{variables.$prefix}color-#{$colorName}-disabled-border
          );
          &:checked {
            &:after {
              border-color: var(
                --#{variables.$prefix}color-#{$colorName}-disabled-fore
              );
            }
          }
        }
      }
    }
  }
}

.input-radio {
  @extend .input;
  appearance: none;
  border-radius: 50%;
  cursor: pointer;
  height: 1rem;
  line-height: 1.5;
  position: relative;
  vertical-align: middle;
  width: 1rem;
  &:after {
    background-color: transparent;
    border-color: transparent;
    border-radius: 50%;
    border-style: solid;
    border-width: var(--#{variables.$prefix}border-width-medium);
    content: "";
    display: block;
    height: 0.5rem;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;
    position: absolute;
    width: 0.5rem;
  }
  @each $borderWidth in variables.$borderWidths {
    $name: map.get($borderWidth, "name");
    &.is-border-width-#{$name} {
      &:after {
        border-width: var(--#{variables.$prefix}border-radius-#{$name});
      }
    }
  }
  &:checked {
    &:after {
      background-color: var(--#{variables.$prefix}color-default-fore);
      border-color: var(--#{variables.$prefix}color-default-fore);
    }
  }
  &[disabled],
  fieldset[disabled],
  &.is-disabled {
    background-color: var(--#{variables.$prefix}color-default-disabled-back);
    border-color: var(--#{variables.$prefix}color-default-disabled-border);
    &:checked {
      &:after {
        border-color: var(--#{variables.$prefix}color-default-disabled-fore);
      }
    }
  }
  @if (not variables.$is-skelton) {
    @each $color in variables.$colors {
      $colorName: map.get($color, "name");
      &.is-#{$colorName} {
        background-color: var(--#{variables.$prefix}color-#{$colorName}-back);
        border-color: var(--#{variables.$prefix}color-#{$colorName}-border);
        &:checked {
          &:after {
            border-color: var(--#{variables.$prefix}color-#{$colorName}-fore);
            background-color: var(
              --#{variables.$prefix}color-#{$colorName}-fore
            );
          }
        }
        &[disabled],
        fieldset[disabled],
        &.is-disabled {
          background-color: var(
            --#{variables.$prefix}color-#{$colorName}-disabled-back
          );
          border-color: var(
            --#{variables.$prefix}color-#{$colorName}-disabled-border
          );
          &:checked {
            &:after {
              border-color: var(
                --#{variables.$prefix}color-#{$colorName}-disabled-fore
              );
              background-color: var(
                --#{variables.$prefix}color-#{$colorName}-disabled-fore
              );
            }
          }
        }
      }
    }
  }
}

.input-color {
  @extend .input;
  cursor: pointer;
  height: 2.5rem;
}

.input[type="text"],
.input[type="email"],
.input[type="number"],
.input[type="password"] {
  @extend .input-text;
}

textarea {
  &.input {
    @extend .input-text;
    min-height: min-content;
    max-width: 100%;
    width: 100%;
    field-sizing: content;
  }
}

.input[type="checkbox"] {
  @extend .input-checkbox;
}

.input[type="radio"] {
  @extend .input-radio;
}

.input[type="color"] {
  @extend .input-color;
}
