@use "sass:math";
@use "../mixins/index.scss" as mixins;
@use "../variables/index.scss" as variables;
@use "../functions/index.scss" as functions;

.columns {
  --#{variables.$prefix}gutter-x: 0;
  --#{variables.$prefix}gutter-y: 0;
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: calc(var(--#{variables.$prefix}gutter-y) * -1);
  margin-right: calc(var(--#{variables.$prefix}gutter-x) * -0.5);
  margin-left: calc(var(--#{variables.$prefix}gutter-x) * -0.5);
  @for $p from 0 through 20 {
    $escapedQuarter: functions.strReplace(#{($p * 0.25)}, ".", "\\.");
    &.has-gutter-#{$escapedQuarter}rem {
      --#{variables.$prefix}gutter-x: #{($p * 0.25rem)};
      --#{variables.$prefix}gutter-y: #{($p * 0.25rem)};
    }
    &.has-gutter-x-#{$escapedQuarter}rem {
      --#{variables.$prefix}gutter-x: #{($p * 0.25rem)};
    }
    &.has-gutter-y-#{$escapedQuarter}rem {
      --#{variables.$prefix}gutter-y: #{($p * 0.25rem)};
    }
    @include mixins.is-responsive("has-gutter", "-#{$escapedQuarter}rem") {
      --#{variables.$prefix}gutter-x: #{($p * 0.25rem)};
      --#{variables.$prefix}gutter-y: #{($p * 0.25rem)};
    }
    @include mixins.is-responsive("has-gutter-x", "-#{$escapedQuarter}rem") {
      --#{variables.$prefix}gutter-x: #{($p * 0.25rem)};
    }
    @include mixins.is-responsive("has-gutter-y", "-#{$escapedQuarter}rem") {
      --#{variables.$prefix}gutter-y: #{($p * 0.25rem)};
    }
  }

  &.is-direction-row {
    flex-direction: row;
  }
  &.is-direction-row-reverse {
    flex-direction: row-reverse;
  }
  &.is-direction-column {
    flex-direction: column;
  }
  &.is-direction-column-reverse {
    flex-direction: column-reverse;
  }

  @include mixins.is-responsive("is", "-direction-row") {
    flex-direction: row;
  }
  @include mixins.is-responsive("is", "-direction-row-reverse") {
    flex-direction: row-reverse;
  }
  @include mixins.is-responsive("is", "-direction-column") {
    flex-direction: column;
  }
  @include mixins.is-responsive("is", "-direction-column-reverse") {
    flex-direction: column-reverse;
  }

  .column {
    @include mixins.column();
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 0%;
    &.is-full {
      flex: none;
      max-width: 100%;
      width: 100%;
    }
  }
  @for $num from 1 through variables.$columns-count {
    .column-#{$num} {
      @include mixins.column();
      flex-basis: math.percentage(math.div($num, variables.$columns-count));
      max-width: math.percentage(math.div($num, variables.$columns-count));
      width: math.percentage(math.div($num, variables.$columns-count));
    }
  }
  .column,
  [class^="column-"] {
    @for $num from 1 through variables.$columns-count {
      @include mixins.is-responsive("is", "-" + $num) {
        flex-basis: math.percentage(math.div($num, variables.$columns-count));
        max-width: math.percentage(math.div($num, variables.$columns-count));
        width: math.percentage(math.div($num, variables.$columns-count));
      }
    }
  }
}
