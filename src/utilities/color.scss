@use "sass:map";
@use "sass:string";
@use "../variables/index.scss" as variables;
@use "../mixins/index.scss" as mixins;

@mixin colorUtilities($colorScheme: "") {
  $derived: "";
  @if $colorScheme != "" {
    $derived: "-#{$colorScheme}";
  }

  @each $color in variables.$colors {
    $colorName: map.get($color, "name");
    $numStr: "00" !default;
    @for $p from 1 through 19 {
      $numStr: ($p * 5) + "";
      @if (string.length($numStr) == 1) {
        $numStr: "0" + $numStr;
      }
      //#region forecolor
      .is-forecolor#{$derived}-#{$colorName}-#{$numStr},
      .forecolor#{$derived}-#{$colorName}-#{$numStr} {
        color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
      }
      .is-forecolor#{$derived}-hover-#{$colorName}-#{$numStr},
      .forecolor#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-forecolor#{$derived}-#{$colorName}-focus-#{$numStr},
      .forecolor#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-forecolor#{$derived}-#{$colorName}-active-#{$numStr},
      .forecolor#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-forecolor#{$derived}-#{$colorName}-disabled-#{$numStr},
      .forecolor#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      //#endregion forecolor

      //#region backcolor
      .is-backcolor#{$derived}-#{$colorName}-#{$numStr},
      .backcolor#{$derived}-#{$colorName}-#{$numStr} {
        background-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
      }
      .is-backcolor#{$derived}-hover-#{$colorName}-#{$numStr},
      .backcolor#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          background-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-backcolor#{$derived}-#{$colorName}-focus-#{$numStr},
      .backcolor#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          background-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-backcolor#{$derived}-#{$colorName}-active-#{$numStr},
      .backcolor#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          background-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-backcolor#{$derived}-#{$colorName}-disabled-#{$numStr},
      .backcolor#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          background-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      //#endregion backcolor

      //#region bordercolor
      .is-bordercolor#{$derived}-#{$colorName}-#{$numStr},
      .bordercolor#{$derived}-#{$colorName}-#{$numStr} {
        border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
      }
      .is-bordercolor#{$derived}-#{$colorName}-#{$numStr},
      .bordercolor#{$derived}-#{$colorName}-#{$numStr} {
        border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
      }
      .is-bordercolor#{$derived}-hover-#{$colorName}-#{$numStr},
      .bordercolor#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-bordercolor#{$derived}-#{$colorName}-focus-#{$numStr},
      .bordercolor#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-bordercolor#{$derived}-#{$colorName}-active-#{$numStr},
      .bordercolor#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }
      .is-bordercolor#{$derived}-#{$colorName}-disabled-#{$numStr},
      .bordercolor#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
        }
      }

      @each $borderSide in variables.$borderSides {
        .is-bordercolor#{$derived}-#{$borderSide}-#{$colorName}-#{$numStr},
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-#{$numStr} {
          border-#{$borderSide}-color: var(
            --#{variables.$prefix}color-#{$colorName}-#{$numStr}
          ) !important;
        }
        .is-bordercolor#{$derived}-#{$borderSide}-hover-#{$colorName}-#{$numStr},
        .bordercolor#{$derived}-#{$borderSide}-hover-#{$colorName}-#{$numStr} {
          &:hover {
            border-#{$borderSide}-color: var(
              --#{variables.$prefix}color-#{$colorName}-#{$numStr}
            ) !important;
          }
        }
        .is-bordercolor#{$derived}-#{$borderSide}-#{$colorName}-focus-#{$numStr},
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-focus-#{$numStr} {
          &:focus {
            border-#{$borderSide}-color: var(
              --#{variables.$prefix}color-#{$colorName}-#{$numStr}
            ) !important;
          }
        }
        .is-bordercolor#{$derived}-#{$borderSide}-#{$colorName}-active-#{$numStr},
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-active-#{$numStr} {
          &:active {
            border-color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
          }
        }
        .is-bordercolor#{$derived}-#{$borderSide}-#{$colorName}-disabled-#{$numStr},
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-disabled-#{$numStr} {
          &[disabled],
          fieldset[disabled] {
            border-#{$borderSide}-color: var(
              --#{variables.$prefix}color-#{$colorName}-#{$numStr}
            ) !important;
          }
        }
      }
      //#endregion bordercolor

      //#region highlighter
      .is-highlighter#{$derived}-#{$colorName}-#{$numStr},
      .highlighter#{$derived}-#{$colorName}-#{$numStr} {
        background: linear-gradient(
          transparent 66.66%,
          var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) 33.33%
        ) !important;
      }
      .is-highlighter#{$derived}-hover-#{$colorName}-#{$numStr},
      .highlighter#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          background: linear-gradient(
            transparent 66.66%,
            var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) 33.33%
          ) !important;
        }
      }
      .is-highlighter#{$derived}-#{$colorName}-focus-#{$numStr},
      .highlighter#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          background: linear-gradient(
            transparent 66.66%,
            var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) 33.33%
          ) !important;
        }
      }
      .is-highlighter#{$derived}-#{$colorName}-active-#{$numStr},
      .highlighter#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          background: linear-gradient(
            transparent 66.66%,
            var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) 33.33%
          ) !important;
        }
      }
      .is-highlighter#{$derived}-#{$colorName}-disabled-#{$numStr},
      .highlighter#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          background: linear-gradient(
            transparent 66.66%,
            var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) 33.33%
          ) !important;
        }
      }
      //#endregion highlighter

    }
  }
}

@include colorUtilities();
@include mixins.setColorScheme("light") {
  @include colorUtilities("light");
}
@include mixins.setColorScheme("dark") {
  @include colorUtilities("dark");
}
