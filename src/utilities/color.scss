@use "sass:map";
@use "sass:string";
@use "../variables/index.scss" as variables;
@use "../mixins/index.scss" as mixins;

@mixin forecolor($colorName, $numStr) {
  @if ($colorName == "rainbow") {
    background-clip: text !important;
    background-image: linear-gradient(
      135deg,
      var(--#{variables.$prefix}color-red-#{$numStr}),
      var(--#{variables.$prefix}color-coral-#{$numStr}),
      var(--#{variables.$prefix}color-orange-#{$numStr}),
      var(--#{variables.$prefix}color-yellow-#{$numStr}),
      var(--#{variables.$prefix}color-lime-#{$numStr}),
      var(--#{variables.$prefix}color-green-#{$numStr}),
      var(--#{variables.$prefix}color-cyan-#{$numStr}),
      var(--#{variables.$prefix}color-blue-#{$numStr}),
      var(--#{variables.$prefix}color-violet-#{$numStr}),
      var(--#{variables.$prefix}color-magenta-#{$numStr})
    ) !important;
    color: transparent !important;
  } @else {
    color: var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) !important;
  }
}

@mixin backcolor($colorName, $numStr) {
  @if ($colorName == "rainbow") {
    background-image: linear-gradient(
      135deg,
      var(--#{variables.$prefix}color-red-#{$numStr}),
      var(--#{variables.$prefix}color-coral-#{$numStr}),
      var(--#{variables.$prefix}color-orange-#{$numStr}),
      var(--#{variables.$prefix}color-yellow-#{$numStr}),
      var(--#{variables.$prefix}color-lime-#{$numStr}),
      var(--#{variables.$prefix}color-green-#{$numStr}),
      var(--#{variables.$prefix}color-cyan-#{$numStr}),
      var(--#{variables.$prefix}color-blue-#{$numStr}),
      var(--#{variables.$prefix}color-violet-#{$numStr}),
      var(--#{variables.$prefix}color-magenta-#{$numStr})
    ) !important;
  } @else {
    background-color: var(
      --#{variables.$prefix}color-#{$colorName}-#{$numStr}
    ) !important;
  }
}

@mixin bordercolor($colorName, $numStr, $borderSide: "") {
  @if ($borderSide == "") {
    @if ($colorName == "rainbow") {
      // not available
    } @else {
      border-color: var(
        --#{variables.$prefix}color-#{$colorName}-#{$numStr}
      ) !important;
    }
  } @else {
    @if ($colorName == "rainbow") {
      // not available
    } @else {
      border-#{$borderSide}-color: var(
        --#{variables.$prefix}color-#{$colorName}-#{$numStr}
      ) !important;
    }
  }
}

@mixin highlighter($colorName, $numStr) {
  @if ($colorName == "rainbow") {
    // not available
  } @else {
    background: linear-gradient(
      transparent 66.66%,
      var(--#{variables.$prefix}color-#{$colorName}-#{$numStr}) 33.33%
    ) !important;
  }
}

@mixin colorUtilities($colorScheme: "") {
  $derived: "";
  @if $colorScheme != "" {
    $derived: "-#{$colorScheme}";
  }

  @each $color in variables.$colors {
    $colorName: map.get($color, "name");
    $numStr: "00";
    @for $p from 1 through 19 {
      $numStr: "#{($p * 5)}";
      @if (string.length($numStr) == 1) {
        $numStr: "0" + $numStr;
      }
      //#region forecolor
      .forecolor#{$derived}-#{$colorName}-#{$numStr} {
        @include forecolor($colorName, $numStr);
      }
      .forecolor#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          @include forecolor($colorName, $numStr);
        }
      }
      .forecolor#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          @include forecolor($colorName, $numStr);
        }
      }
      .forecolor#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          @include forecolor($colorName, $numStr);
        }
      }
      .forecolor#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          @include forecolor($colorName, $numStr);
        }
      }
      //#endregion forecolor

      //#region backcolor
      .backcolor#{$derived}-#{$colorName}-#{$numStr} {
        @include backcolor($colorName, $numStr);
      }
      .backcolor#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          @include backcolor($colorName, $numStr);
        }
      }
      .backcolor#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          @include backcolor($colorName, $numStr);
        }
      }
      .backcolor#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          @include backcolor($colorName, $numStr);
        }
      }
      .backcolor#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          @include backcolor($colorName, $numStr);
        }
      }
      //#endregion backcolor

      //#region bordercolor
      .bordercolor#{$derived}-#{$colorName}-#{$numStr} {
        @include bordercolor($colorName, $numStr);
      }
      .bordercolor#{$derived}-#{$colorName}-#{$numStr} {
        @include bordercolor($colorName, $numStr);
      }
      .bordercolor#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          @include bordercolor($colorName, $numStr);
        }
      }
      .bordercolor#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          @include bordercolor($colorName, $numStr);
        }
      }
      .bordercolor#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          @include bordercolor($colorName, $numStr);
        }
      }
      .bordercolor#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          @include bordercolor($colorName, $numStr);
        }
      }

      @each $borderSide in variables.$borderSides {
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-#{$numStr} {
          @include bordercolor($colorName, $numStr, $borderSide);
        }
        .bordercolor#{$derived}-#{$borderSide}-hover-#{$colorName}-#{$numStr} {
          &:hover {
            @include bordercolor($colorName, $numStr, $borderSide);
          }
        }
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-focus-#{$numStr} {
          &:focus {
            @include bordercolor($colorName, $numStr, $borderSide);
          }
        }
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-active-#{$numStr} {
          &:active {
            @include bordercolor($colorName, $numStr, $borderSide);
          }
        }
        .bordercolor#{$derived}-#{$borderSide}-#{$colorName}-disabled-#{$numStr} {
          &[disabled],
          fieldset[disabled] {
            @include bordercolor($colorName, $numStr, $borderSide);
          }
        }
      }
      //#endregion bordercolor

      //#region highlighter
      .highlighter#{$derived}-#{$colorName}-#{$numStr} {
        @include highlighter($colorName, $numStr);
      }
      .highlighter#{$derived}-hover-#{$colorName}-#{$numStr} {
        &:hover {
          @include highlighter($colorName, $numStr);
        }
      }
      .highlighter#{$derived}-#{$colorName}-focus-#{$numStr} {
        &:focus {
          @include highlighter($colorName, $numStr);
        }
      }
      .highlighter#{$derived}-#{$colorName}-active-#{$numStr} {
        &:active {
          @include highlighter($colorName, $numStr);
        }
      }
      .highlighter#{$derived}-#{$colorName}-disabled-#{$numStr} {
        &[disabled],
        fieldset[disabled] {
          @include highlighter($colorName, $numStr);
        }
      }
      //#endregion highlighter
    }
  }

  //#region rainbow

  $numStr: "00";
  @for $p from 1 through 19 {
    $numStr: "#{($p * 5)}";
    @if (string.length($numStr) == 1) {
      $numStr: "0" + $numStr;
    }
    //#region forecolor
    .forecolor#{$derived}-rainbow-#{$numStr} {
      @include forecolor("rainbow", $numStr);
    }
    .forecolor#{$derived}-hover-rainbow-#{$numStr} {
      &:hover {
        @include forecolor("rainbow", $numStr);
      }
    }
    .forecolor#{$derived}-rainbow-focus-#{$numStr} {
      &:focus {
        @include forecolor("rainbow", $numStr);
      }
    }
    .forecolor#{$derived}-rainbow-active-#{$numStr} {
      &:active {
        @include forecolor("rainbow", $numStr);
      }
    }
    .forecolor#{$derived}-rainbow-disabled-#{$numStr} {
      &[disabled],
      fieldset[disabled] {
        @include forecolor("rainbow", $numStr);
      }
    }
    //#endregion forecolor

    //#region backcolor
    .backcolor#{$derived}-rainbow-#{$numStr} {
      @include backcolor("rainbow", $numStr);
    }
    .backcolor#{$derived}-hover-rainbow-#{$numStr} {
      &:hover {
        @include backcolor("rainbow", $numStr);
      }
    }
    .backcolor#{$derived}-rainbow-focus-#{$numStr} {
      &:focus {
        @include backcolor("rainbow", $numStr);
      }
    }
    .backcolor#{$derived}-rainbow-active-#{$numStr} {
      &:active {
        @include backcolor("rainbow", $numStr);
      }
    }
    .backcolor#{$derived}-rainbow-disabled-#{$numStr} {
      &[disabled],
      fieldset[disabled] {
        @include backcolor("rainbow", $numStr);
      }
    }
    //#endregion backcolor

    // NOTE: bordercolor is not available

    // NOTE: highlighter is not available
  }
  //#endregion rainbow
}

@include colorUtilities();
@include mixins.setColorScheme("light") {
  @include colorUtilities("light");
}
@include mixins.setColorScheme("dark") {
  @include colorUtilities("dark");
}
